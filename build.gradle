plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.2'
    id 'com.enonic.xp.base' version '3.2.0'
    id "com.github.node-gradle.node" version '3.5.0'
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/node.gradle"

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

repositories {
    mavenCentral()
    xp.enonicRepo()
}

group = 'com.enonic.lib'
archivesBaseName = 'lib-admin-ui'

node {
    download = true
    version = '18.12.1'
}

def resourcesDir = file( 'src/main/resources' )

publishing {
    publications {
        mavenJava( MavenPublication ) {
            pom {
                name = 'Enonic Admin UI Library'
                description = 'UI components for Enonic XP applications'
                url = 'https://github.com/enonic/lib-admin-ui'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://github.com/enonic/lib-admin-ui/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Enonic developers'
                        email = 'developers@enonic.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/enonic/lib-admin-ui.git'
                    developerConnection = 'scm:git:git@github.com:enonic/lib-admin-ui.git'
                    url = 'https://github.com/enonic/lib-admin-ui'
                }
            }
        }
    }
}

loadConfiguration()

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint:quiet' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

check.dependsOn( lint )

task typescriptPkg( type: NpmTask, dependsOn: npmInstall ) {
    def buildEnv = isProd() ? 'prod' : 'dev'
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ 'run', "build:$buildEnv" ]
    inputs.dir "$resourcesDir/assets/admin/common"
    outputs.dir "$buildDir/resources/main/dev/lib-admin-ui"
}

task typescriptLib( type: NpmTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build library, that should be included to HTML.'
    args = [ 'run', 'build:lib' ]
    inputs.dir "$resourcesDir/assets/admin/common"
    outputs.dir "$buildDir/resources/main/assets/admin/common"
}

task copyPackage( type: Copy ) {
    from( './' ) {
        include 'package.json'
    }
    into "$buildDir/resources/main/dev/lib-admin-ui"
    includeEmptyDirs = false
}

task typescript {
    dependsOn 'typescriptPkg'
    dependsOn 'typescriptLib'
    dependsOn 'copyPackage'
}

jar {
    exclude 'dev/**'
    exclude 'assets/spec/**'
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'
    exclude 'assets/**/styles/*.js'
    exclude 'assets/**/icons/*.txt'

    // COMMON/LIB excludes
    // Exclude complex files, that only present after the first build and must be evaluated dynamically
    def whitelist = [
        /.*lib\.js$/,
        /.*\.css$/,
    ] as List

    if (isProd()) {
        exclude '**/*.map'
    } else {
        whitelist.add( /.*\.map$/ )
    }

    exclude {
        FileTreeElement el -> !el.directory && el.relativePath.contains('common/lib') && (!whitelist.any { re -> el.relativePath.toString().matches( re ) })
    }

    includeEmptyDirs = false
    dependsOn typescript
}

task devJar ( type: Jar ) {
    archiveClassifier = 'dev-resources'
    from sourceSets.main.output
    include 'dev/**'
    exclude 'dev/lib-admin-ui/lib.js'
    includeEmptyDirs = false
    dependsOn typescript
}

tasks.assemble.dependsOn devJar

artifacts {
    devResources devJar
}

components.java.addVariantsFromConfiguration( configurations.devResources ) {
}

task flush( type: Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}

def loadConfiguration() {
    def envList = [ 'dev', 'prod' ]
    def environment = hasEnvironment() ? env : 'prod'

    if ( !envList.contains( environment ) ) {
        def message = "Target environment '$environment' is not allowed. Please use one of the following: ${envList.join(", ")}"
        throw new ResourceException( message )
    }

    println "Environment is set to $nodeEnvironment()"
}
