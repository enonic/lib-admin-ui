plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.base' version '2.0.0'
    id 'com.moowork.gulp' version '1.2.0'
}

repositories {
    jcenter()
    xp.enonicRepo()
}


group = 'com.enonic.lib'
version = '2.2.0-SNAPSHOT'

jar {
    baseName = 'lib-admin-ui'
}

node {
    download = true
    version = '8.10.0'
}

def resourcesDir = file( 'src/main/resources' )

loadConfiguration()

task lint( type: GulpTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Lint the *.ts files.'
    args = [ 'lint' ]
    inputs.files fileTree( dir: resourcesDir, exclude: '**/_all.*' )
    outputs.files fileTree( dir: resourcesDir, include: '**/_all.*' )
    outputs.upToDateWhen { false }
}

task compile( type: GulpTask, dependsOn: lint ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (css, etc).'
    args = [ 'all:no-lint' ]
    inputs.files fileTree( dir: resourcesDir, exclude: '**/_all.*' )
    outputs.files fileTree( dir: resourcesDir, include: '**/_all.*' )
}

task copyCompiled( type: Copy ) {
    description = 'Copy compiled JS and CSS files'
    from( "$resourcesDir/assets" ) {
        include '**/_all.js'
        include '**/_all.css'
        include '**/_all.lite.css'
    }
    into 'build/resources/main/assets'
    includeEmptyDirs = false
}

task copyDTS( type: Copy ) {
    description = 'Copy Typescript definitions to /dev/d.ts folder.'
    from( "$resourcesDir/assets/admin/common/js" ) {
        include '**/*.d.ts'
        rename '_all.d.ts', 'admin.d.ts'
    }
    into 'build/resources/main/dev/d.ts'
    includeEmptyDirs = false
}

task copyStyles( type: Copy ) {
    description = 'Copy styles from libraries to /dev/styles folder.'
    def srcDir = "$resourcesDir/assets/admin/common/"
    from( "$srcDir/lib" ) {
        include '**/*.css'
        into 'lib'
    }
    includeEmptyDirs = false
    into 'build/resources/main/dev'
}

task copyAll {
    dependsOn 'compile'
    dependsOn 'copyCompiled'
    dependsOn 'copyDTS'
    dependsOn 'copyStyles'
    tasks.findByName('copyCompiled').mustRunAfter 'compile'
}

jar {
    exclude 'assets/spec/**'
    exclude 'assets/**/*.ts'   // let dev/**/admin.d.ts through to be used by other apps
    exclude 'assets/**/*.less' // let dev/**/*.less through to be used by other apps

    // COMMON/LIB excludes
    // Exclude complex files, that only present after the first build and must be evaluated dynamically
    def whitelist = [
        /.*_all\.js$/,
        /.*\.css$/,
    ] as List

    if (isProd()) {
        exclude '**/*.map'
    } else {
        whitelist.add( /.*\.map$/ )
    }

    exclude {
        FileTreeElement el -> !el.directory && el.relativePath.contains('common/lib') && (!whitelist.any { re -> el.relativePath.toString().matches( re ) })
    }

    includeEmptyDirs = false
    dependsOn += copyAll
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = [ 'install', '--force' ]
}

task cleanNode( type: Delete ) {
    delete += 'node_modules'
}

task flush( type: Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
    delete fileTree("$resourcesDir/assets/admin/common") { include '**/_all.*' }
}

def loadConfiguration() {
    def envList = [ 'dev', 'prod' ]
    def environment = hasProperty( 'env' ) ? env : 'prod'

    if ( !envList.contains( environment ) ) {
        def message = "Target environment '$environment' is not allowed. Please use one of the following: ${envList.join(", ")}"
        throw new ResourceException( message )
    }

    def isDev = environment != 'prod'
    project.ext.isDev = isDev

    def envName = nodeEnvironment()
    println "Environment is set to $envName"
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

def isProd() {
    return hasProperty( 'env' ) ? (env == 'prod') : true
}
