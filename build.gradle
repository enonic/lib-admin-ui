plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.base' version '3.6.2'
    id "com.github.node-gradle.node" version '7.1.0'
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/node.gradle"

configurations {
    devResources {
        attributes {
            attribute LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' )
        }
    }
}

repositories {
    mavenCentral()
    xp.enonicRepo()
}

group = 'com.enonic.lib'

base {
    archivesName = 'lib-admin-ui'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of( 21 )
    }
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            pom {
                name = 'Enonic Admin UI Library'
                description = 'UI components for Enonic XP applications'
                url = 'https://github.com/enonic/lib-admin-ui'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://github.com/enonic/lib-admin-ui/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developers'
                        name = 'Enonic developers'
                        email = 'developers@enonic.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/enonic/lib-admin-ui.git'
                    developerConnection = 'scm:git:git@github.com:enonic/lib-admin-ui.git'
                    url = 'https://github.com/enonic/lib-admin-ui'
                }
            }
        }
    }
}

tasks.register( 'pnpmCheck', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    args = ['run', 'check']
    outputs.cacheIf { false }
}

tasks.named( 'check' ).configure {
    dependsOn tasks.named( 'pnpmCheck' )
}

tasks.register( 'pnpmBuild', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    description = 'Build JavaScript for .xp, and Lib script and styles'
    args = ['run', "build:${environmentShort()}"]
    inputs.dir 'src/main/resources/assets/admin/common'
    outputs.dirs layout.buildDirectory.dir('resources/main/dev/lib-admin-ui'),
                 layout.buildDirectory.dir('resources/main/assets/admin/common')
}

tasks.register( 'copyPackage', Copy ) {
    dependsOn tasks.named( 'pnpmBuild' )
    from 'package.json'
    into layout.buildDirectory.dir('resources/main/dev/lib-admin-ui')
}

tasks.named( 'processResources' ).configure {
    // Handled by the Vite
    exclude 'assets/admin/common/fonts/**'
    // Icons (icomoon) are bundled with the fonts
    exclude 'assets/admin/common/icons/**'
    // Images are inlined to the CSS
    exclude 'assets/admin/common/images/**'
    // Bundled into lib.js
    exclude 'assets/admin/common/lib/**'
    // Don't need to copy CSS files
    exclude 'assets/admin/common/styles/**'
}

tasks.named( 'jar' ).configure {
    exclude 'dev/**'
    exclude 'assets/spec/**'
    exclude 'assets/**/*.ts'

    includeEmptyDirs = false

    dependsOn tasks.named( 'copyPackage' )
}

tasks.register( 'devJar', Jar ) {
    archiveClassifier = 'dev-resources'
    from sourceSets.main.output

    include 'dev/**'
    exclude 'dev/lib-admin-ui/lib.js'
    exclude 'dev/lib-admin-ui/lib.d.ts'

    includeEmptyDirs = false

    dependsOn tasks.named( 'copyPackage' )
}

tasks.named( 'assemble' ) {
    dependsOn tasks.named( 'devJar' )
}

artifacts {
    devResources devJar
}

components.java.addVariantsFromConfiguration( configurations.devResources ) {
}

tasks.register( 'yolo' ) {
    description = 'Build without running install, check, or test tasks'

    dependsOn tasks.named( 'build' )

    nodeSetup.enabled = false
    npmSetup.enabled = false
    pnpmSetup.enabled = false
    pnpmInstall.enabled = false
    pnpmCheck.enabled = false
    check.enabled = false
    test.enabled = false
}
